"C:\\Users\\Rising Star\\Downloads\\rprog_data_specdata"
source("C:/Users/Rising Star/Downloads/rprog_data_specdata/pollutantmean.R")
source("C:/Users/Rising Star/Downloads/rprog_data_specdata/pollutantmean.R")
"C:\\Users\\Rising Star\\Downloads\\rprog_data_specdata"
pollutantmean <- function(directory, pollutant, id = 1:332) {
# Create a vector to store pollutant values
pollutant_data <- c()
# Loop through each monitor ID
for (monitor in id) {
# Construct file path, ensuring correct formatting (e.g., "001.csv", "010.csv", etc.)
file_name <- sprintf("%03d.csv", monitor)
file_path <- file.path(directory, file_name)
# Read the data from CSV file
if (file.exists(file_path)) {
data <- read.csv(file_path)
# Extract pollutant values and ignore NAs
pollutant_data <- c(pollutant_data, data[[pollutant]])
}
}
# Return the mean, ignoring NA values
mean(pollutant_data, na.rm = TRUE)
}
# Example usage
pollutantmean("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", "sulfate", 1:10)
pollutantmean("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", "nitrate", 70:72)
pollutantmean("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", "sulfate", 23)
complete <- function(directory, id = 1:332) {
# Initialize an empty data frame to store results
results <- data.frame(id = integer(), nobs = integer())
# Loop through each monitor ID
for (monitor in id) {
# Construct file path (e.g., "001.csv", "010.csv", etc.)
file_name <- sprintf("%03d.csv", monitor)
file_path <- file.path(directory, file_name)
# Read the data if file exists
if (file.exists(file_path)) {
data <- read.csv(file_path)
# Count complete cases (rows with no NA values)
num_complete_cases <- sum(complete.cases(data))
# Append results to data frame
results <- rbind(results, data.frame(id = monitor, nobs = num_complete_cases))
}
}
return(results)
}
# Example usage
complete("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 1:10)
complete("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", c(2, 4, 8, 10, 12))
complete("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 30:25)
corr <- function(directory, threshold = 0) {
# Initialize an empty vector to store correlation values
correlation_values <- numeric(0)
# List all the files in the directory
files <- list.files(directory, full.names = TRUE)
# Loop through each file in the directory
for (file in files) {
# Read the data
data <- read.csv(file)
# Count complete cases
complete_cases <- complete.cases(data)
# If the number of complete cases is greater than the threshold
if (sum(complete_cases) > threshold) {
# Calculate the correlation between sulfate and nitrate for complet
# Example usage
corr("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 150)
corr("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 400)
corr("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 0)
corr <- function(directory, threshold = 0) {
# Initialize an empty vector to store correlation values
correlation_values <- numeric(0)
# List all the files in the directory
files <- list.files(directory, full.names = TRUE)
# Loop through each file in the directory
for (file in files) {
# Read the data
data <- read.csv(file)
# Count complete cases
complete_cases <- complete.cases(data)
# If the number of complete cases is greater than the threshold
if (sum(complete_cases) > threshold) {
# Calculate the correlation between sulfate and nitrate for complete cases
correlation_value <- cor(data$sulfate[complete_cases], data$nitrate[complete_cases])
# Append the correlation value to the result vector
correlation_values <- c(correlation_values, correlation_value)
}
}
# Return the correlation values
return(correlation_values)
}
q()
"C:\\Users\\Rising Star\\Desktop"
# Step 1: Read the outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Step 1: Read the outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
"C:\\Users\\Rising Star\\Desktop"
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Validate state
if (!(state %in% unique(data$State))) {
stop("invalid state")
}
## Define valid outcomes and their respective column indices
outcome_cols <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
## Validate outcome
if (!(outcome %in% names(outcome_cols))) {
stop("invalid outcome")
}
## Filter data for the given state
state_data <- data[data$State == state, ]
## Convert outcome column to numeric (suppress warnings for NA)
col_index <- outcome_cols[[outcome]]
state_data[, col_index] <- suppressWarnings(as.numeric(state_data[, col_index]))
## Remove rows with NA values in the outcome column
state_data <- state_data[!is.na(state_data[, col_index]), ]
## Find the hospital with the lowest mortality rate
min_value <- min(state_data[, col_index])
best_hospitals <- state_data[state_data[, col_index] == min_value, "Hospital.Name"]
## Return hospital name (alphabetically first in case of tie)
return(sort(best_hospitals)[1])
}
source("best.R")
"C:\\Users\\Rising Star\\Desktop"
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Validate state
if (!(state %in% unique(data$State))) {
stop("invalid state")
}
## Define valid outcomes and their respective column indices
outcome_cols <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
## Validate outcome
if (!(outcome %in% names(outcome_cols))) {
stop("invalid outcome")
}
## Filter data for the given state
state_data <- data[data$State == state, ]
## Convert outcome column to numeric (suppress warnings for NA)
col_index <- outcome_cols[[outcome]]
state_data[, col_index] <- suppressWarnings(as.numeric(state_data[, col_index]))
## Remove rows with NA values in the outcome column
state_data <- state_data[!is.na(state_data[, col_index]), ]
## Find the hospital with the lowest mortality rate
min_value <- min(state_data[, col_index])
best_hospitals <- state_data[state_data[, col_index] == min_value, "Hospital.Name"]
## Return hospital name (alphabetically first in case of tie)
return(sort(best_hospitals)[1])
}
source("best.R")
source("best.R")
data <- read.table("C:/Users/Rising Star/Downloads/household_power_consumption.txt",
sep=";", header=TRUE, na.strings="?", stringsAsFactors=FALSE)
data <- read.table("C:/Users/Rising Star/Downloads/exdata_data_household_power_consumption/household_power_consumption.txt",
sep=";", header=TRUE, na.strings="?", stringsAsFactors=FALSE)
setwd("C:/Users/Rising Star/Downloads/exdata_data_household_power_consumption")
data <- read.table("household_power_consumption.txt", sep=";", header=TRUE,
na.strings="?", stringsAsFactors=FALSE)
# Estimate memory usage (assuming 8 bytes per numeric value)
rows <- 2075259
cols <- 9
memory_required <- (rows * cols * 8) / (1024^2)  # Convert bytes to MB
print(memory_required)  # Approximate memory in MB
# Read only the rows for 1st and 2nd February 2007
data <- read.table("household_power_consumption.txt", sep=";", header=TRUE,
na.strings="?", stringsAsFactors=FALSE)
# Convert Date column to Date format
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
# Subset the data for the required dates
subset_data <- subset(data, Date >= "2007-02-01" & Date <= "2007-02-02")
subset_data$Datetime <- strptime(paste(subset_data$Date, subset_data$Time), format="%Y-%m-%d %H:%M:%S")
png("plot1.png", width=480, height=480)
hist(subset_data$Global_active_power, col="red", main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency")
dev.off()
png("plot2.png", width=480, height=480)
plot(subset_data$Datetime, subset_data$Global_active_power, type="l",
xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
png("plot3.png", width=480, height=480)
plot(subset_data$Datetime, subset_data$Sub_metering_1, type="l", col="black",
ylab="Energy sub metering", xlab="")
lines(subset_data$Datetime, subset_data$Sub_metering_2, col="red")
lines(subset_data$Datetime, subset_data$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black", "red", "blue"), lty=1)
dev.off()
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))  # Create a 2x2 grid
# Plot 1: Global Active Power
plot(subset_data$Datetime, subset_data$Global_active_power, type="l",
xlab="", ylab="Global Active Power")
# Plot 2: Voltage
plot(subset_data$Datetime, subset_data$Voltage, type="l",
xlab="datetime", ylab="Voltage")
# Plot 3: Energy Sub-Metering
plot(subset_data$Datetime, subset_data$Sub_metering_1, type="l", col="black",
ylab="Energy sub metering", xlab="")
lines(subset_data$Datetime, subset_data$Sub_metering_2, col="red")
lines(subset_data$Datetime, subset_data$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black", "red", "blue"), lty=1, bty="n")
# Plot 4: Global Reactive Power
plot(subset_data$Datetime, subset_data$Global_reactive_power, type="l",
xlab="datetime", ylab="Global Reactive Power")
dev.off()
View(subset_data)
View(subset_data)
